---
title: API Clients and REST API
layout: documentation
---

## Places.js Library

**Important:** The default way to use Places is through the Places.js library.

You can read more about how to use the Places.js library in the [documentation section](documentation.html). The present section is describing alternative ways of accessing Places data. You should first checkout out the [documentation](documentation.html) for Places.js as well as the [examples](examples.html) page to determine whether or not the clients are a better fit for your use case.

## API Clients
### JavaScript API Client

You can directly query the [Places REST API](api-clients.html#rest-api) using our [JavaScript API client](https://github.com/algolia/algoliasearch-client-javascript), either in browsers or with [Node.js](https://nodejs.org/).



```js
// var algoliasearch = require('algoliasearch');
var places = algoliasearch.initPlaces('YOUR_PLACES_APP_ID', 'YOUR_PLACES_API_KEY');
places
  .search(/*{REST API Params}*/, function(err, res) {
    if (err) {
      throw err;
    }
    console.log(res);
  });

places
  .getObject(/*{REST API Params}*/, function(err, res) {
    if (err) {
      throw err;
    }
    console.log(res);
  });
```

Note: _Like with the Places.js library, you need to provide your Places App credentials in order for the clients to function properly. If you do not have a Places application, you can create one by [signing up for free](https://www.algolia.com/users/sign_up/places)._

### PHP API Client

You can directly query the [Places REST API](api-clients.html#rest-api) with our [PHP API Client](https://github.com/algolia/algoliasearch-client-php), so that you can do backend Places searches.

```php
<?php

$appId = 'YOUR_PLACES_APP_ID';
$apiKey = 'YOUR_PLACES_API_KEY';

$places = \AlgoliaSearch\Client::initPlaces($appId, $apiKey);

$result = $places->search('Paris');
var_dump($result);
```

Note: _Like with the Places.js library, you need to provide your Places App credentials in order for the clients to function properly. If you do not have a Places application, you can create one by [signing up for free](https://www.algolia.com/users/sign_up/places)._

### Swift API Client

You can directly query the [Places REST API](api-clients.html#rest-api) with our [Swift API Client](https://github.com/algolia/algoliasearch-client-swift), so that you can do backend Places searches.

```swift
// initialize client
let places = PlacesClient(appID: "YOUR_PLACES_APP_ID", apiKey: "YOUR_PLACES_API_KEY")

// craft a query
let query = PlacesQuery()
query.query = "Paris"
query.type = .city
query.hitsPerPage = 10
query.aroundLatLngViaIP = false
query.aroundLatLng = LatLng(lat: 32.7767, lng: -96.7970) // Dallas, TX, USA
query.language = "en"
query.countries = ["fr", "us"]

// search
places.search(query) { (content, error) in
    // content?["hits"] to access the hits
}
```

Note: _Like with the Places.js library, you need to provide your Places App credentials in order for the clients to function properly. If you do not have a Places application, you can create one by [signing up for free](https://www.algolia.com/users/sign_up/places)._

### Android API Client

You can directly query the [Places REST API](api-clients.html#rest-api) with our [Android API Client](https://github.com/algolia/algoliasearch-client-android), so that you can do backend Places searches.

```java
// initialize client
PlacesClient places = new PlacesClient("YOUR_PLACES_APP_ID", "YOUR_PLACES_API_KEY");

// craft a query
PlacesQuery query = new PlacesQuery();
query.setQuery("Paris");
query.setType(PlacesQuery.Type.CITY);
query.setHitsPerPage(10);
query.setAroundLatLngViaIP(false);
query.setAroundLatLng(new PlacesQuery.LatLng(32.7767, -96.7970)); // Dallas, TX, USA
query.setLanguage("en");
query.setCountries("fr", "us");

// search
places.searchAsync(query, new CompletionHandler() {
    ...
});
```

## REST API

The Algolia Places REST API supports HTTPS and is available via the `https://places-dsn.algolia.net` domain (leveraging our [Distributed Search Network](https://www.algolia.com/dsn) infrastructure).

In order to guarantee a very high-availability, we recommend to implement a retry strategy on the following hosts if the `https://places-dsn.algolia.net` call fails:

  - `https://places-1.algolianet.com`,
  - then `https://places-2.algolianet.com`,
  - then `https://places-3.algolianet.com`.

### Endpoints

#### Search

To search using the Algolia Places REST API, you need to target the `/1/places/query` endpoint with a `POST` request.

```bash
$ curl -X POST 'https://places-dsn.algolia.net/1/places/query' --data '{"query": "Paris"}'
```

**Note:** The relative path prefix `/1/` indicates that we are currently using version 1 of the API.

#### Get by objectID

To get an Algolia Places Record using the REST API, you need to target the `/1/places/{objectID}` endpoint with a `GET` request.
Replace `{objectID}` by the objectID you whish to query.

```bash
$ curl -X GET 'https://places-dsn.algolia.net/1/places/111781_17807753'
```

### Reverse geocoding

Reverse geocoding means converting a location (latitude and longitude) to a readable address.

**Note:** `aroundLatLng` parameter is mandatory. The only optional parameters permitted for this endpoint are `hitsPerPage` and `language`.

```bash
$ curl -X GET 'https://places-dsn.algolia.net/1/places/reverse?aroundLatLng=48.880379,%202.327007&hitsPerPage=5&language=fr'
```

### Authentication

If you're using the authenticated version of our API (higher rate-limits), you'll need to authenticate yourself. This is done via the following HTTP headers:

  - `X-Algolia-Application-Id`,
  - and `X-Algolia-API-Key`.

```bash
$ curl -X POST 'https://places-dsn.algolia.net/1/places/query' \
  -H 'X-Algolia-Application-Id: YourApplicationId' \
  -H 'X-Algolia-API-Key: YourAPIKey' \
  --data '{"query": "Paris"}'
```

### Search parameters

Those are the available query parameters you can use to filter your search results:

<!-- Indentation is on purpose for <td>s, to allow HTML inside markdown -->
<table class="api">
  <thead><tr>
    <th>Option</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-type"><code>type</code></div>
Type: string
</td>
<td markdown="1">
Restrict the search results to a specific type.

Available types:

- `city`
- `country`
- `address`
- `busStop`
- `trainStation`
- `townhall`
- `airport`

**Default**: Search in all types.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-type"><code>hitsPerPage</code></div>
Type: number
</td>
<td markdown="1">
Specifies how many results you want to retrieve per search.

**Default**: 20.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-type"><code>page</code></div>
Type: number
</td>
<td markdown="1">
Specifies the current page to retrieve results for. First page starts at 0.

**Default**: 0.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-language"><code>language</code></div>
Type: string
</td>
<td markdown="1">
If specified, restrict the search results to a single language.
You can pass two letters country codes ([ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)).

Warning: language parameter is case sensitive and should be lowercase otherwise it will fallback to default language.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-countries"><code>countries</code></div>
Type: string
</td>
<td markdown="1">
If specified, restrict the search results to a specific list of comma-separated countries. You can pass two letters country codes ([ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).

**Default**: Search on the whole planet.

**Warning**: country codes **must** be lower-cased.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundLatLng"><code>aroundLatLng</code></div>
Type: string
</td>
<td markdown="1">
Force to *first* search around a specific latitude longitude. The option value must be provided as a string:
`latitude,longitude` like `12.232,23.1`.

The default is to search around the location of the user determined via his IP address (geoip).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundLatLngViaIP"><code>aroundLatLngViaIP</code></div>
Type: boolean
</td>
<td markdown="1">
Whether or not to *first* search around the geolocation of the user found via his IP address. This is `true` by
default.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundRadius"><code>aroundRadius</code></div>
Type: number
</td>
<td markdown="1">
Radius in meters to search around the latitude/longitude. Otherwise a default radius is automatically computed
given the area density.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-getRankingInfo"><code>getRankingInfo</code></div>

Type: **boolean**
</td>
<td markdown="1">
Controls whether the [_rankingInfo](https://www.algolia.com/doc/api-reference/api-methods/search/#method-response-_rankinginfo) object should be included in the hits. This defaults to `false`.

The _rankingInfo object for a Places query is slightly different from a regular Algolia query and you can read up more about the difference and how to leverage them in [our guide](examples.html#using-_rankinginfo).
</td>
</tr>
  </tbody>
</table>

For instance, to search for **cities** in the **US** and in **France**, you would do:

```bash
$ curl -X POST 'https://places-dsn.algolia.net/1/places/query' \
  --data '{"query": "Paris", "type": "city", "countries": ["us", "fr"]}'
```

### HTTP headers

You can use the regular `X-Forwarded-For` HTTP header to override the source IP address used to resolve the geo-location of the user. This is particularly useful when you want to use the API from your backend as if it was from your end-users locations.

```bash
$ curl -X POST 'https://places-dsn.algolia.net/1/places/query' \
  -H 'X-Forwarded-For: 1.2.3.4' \
  --data '{"query": "Paris"}'
```

### JSON answer

The API answers is using the JSON format and looks like:

```js
{
  "hits": [{
    "objectID": "145746683_7444",
    "locale_names": {
      "ar": ["باريس"],
      "ru": ["Париж"],
      "fr": ["Paris", "Lutèce"],
      "it": ["Parigi"],
      "default": ["Paris"],
      "pl": ["Paryż"],
      "hu": ["Párizs"],
      "ja": ["パリ"],
      "nl": ["Parijs"],
      "es": ["París"],
      "zh": ["巴黎"]
    },
    "city": {
      "default": ["Paris"],
      // ... other languages
    },
    "county": {
      "default": ["Paris"],
      // ... other languages
    },
    "administrative": ["Île-de-France"],
    "country": {
      "default": "France",
      // ... other languages
    },
    "country_code": "fr",
    "postcode": ["75000"],
    "population": 2243833,
    "_geoloc": {
      "lat": 48.8564,
      "lng": 2.3521
    },
    "_highlightResult": {
      "locale_names": {
        "default": [{
            "value": "<em>Paris</em>",
            "fullyHighlighted": true,
            "matchedWords": ["paris"],
            "matchLevel": "full"
          }]
          // [...]
      },
      "city": {
        // [...]
      },
      "county": {
        // [...]
      },
      "country": {
        // [...]
      },
      "postcode": [
        // [...]
      ],
      "administrative": [
        // [...]
      ]
    }
  }],
  "nbHits": 1,
  "query": "Paris"
}
```

<table class="api">
  <thead><tr>
    <th>Property</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-name"><code>locale_names</code></div>
</td>
<td markdown="1">
List of names of the place. If no `language` parameter is specified, retrieves all of them.

Examples:

 - Paris
 - 589 Howard Street
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-city"><code>city</code></div>
</td>
<td markdown="1">
List of the associated city names. If no `language` parameter is specified, retrieves all of them.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-county"><code>county</code></div>
</td>
<td markdown="1">
List of the associated county names. If no `language` parameter is specified, retrieves all of them.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-administrative"><code>administrative</code></div>
</td>
<td markdown="1">
List of associated administrative region names.

Examples:

 - Pays de la Loire
 - Texas
 - Catalunya
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-country"><code>country</code></div>
</td>
<td markdown="1">
Associated country name.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-countryCode"><code>countryCode</code></div>
</td>
<td markdown="1">
Two letters country code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-postcode"><code>postcode</code></div>
</td>
<td markdown="1">
List of associated postcodes.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-population"><code>population</code></div>
</td>
<td markdown="1">
Associated population.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-latlng"><code>_geoloc</code></div>
</td>
<td markdown="1">
Associated list of latitude and longitude.

Examples:

 - `[{lat: 48.797885, lng: 2.337034}]`
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-highlightResult"><code>_highlightResult</code></div>
</td>
<td markdown="1">
The associated highlighting information.
</td>
    </tr>
</tbody>
</table>

**Note:** The non-documented attributes of the JSON answer may change, don't rely on them.

### Alternative JSON answer format

When you provide the `language` parameter, only data for that language will be returned.

Here is what it would look like if you are using the `fr` language for the `Paris` query:

```js
{
  "hits": [{
    "objectID": "145746683_7444",
    "locale_names": ["Paris", "Lutèce"],
    "city": ["Paris"],
    // ...
  }],
}
```

**Warning:** In case you provide a non existing language, the engine will fallback to
the default language and only display flattened values for that one resulting in
the same output as in the last example.


### Query strategy

The Algolia Places REST API leverages [Algolia's Search API](https://www.algolia.com), the [OpenStreetMap](https://www.openstreetmap.org/) and the [GeoNames](http://www.geonames.org/) data.

When you perform an Algolia Places Query:

 1. If you don't specify any `aroundLatLng` query parameter or if your source IP address isn't geo-localized, results will come from all around the world.
 1. If you specify an `aroundLatLng` query parameter or if your source IP address is geo-localized, results will be composed by:
   - Places around you (&lt;10km),
   - Places in your country,
   - Popular places all around the world.
 1. Specifying a `country` query parameter will override this behavior, restricting the results to come from a subset of the countries.
 1. Numerical tokens are considered as optional words.
 1. Stopwords in the middle of the query are removed from the underlying search query (performance and relevancy purposes).
 1. Popular cities will always be retrieved first.
 1. If both a `city` and an `address` are matching, the city will be retrieved first.
 1. If the `query` doesn't retrieve any results, we fallback on a degraded query strategy: all words are considered optional and we only target cities.
