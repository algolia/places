---
title: Documentation
layout: documentation
---
## What is Places?
Algolia Places is a geocoder providing a fast, distributed and easy way to use an address search autocomplete on your website. It is available as a Javascript autocomplete library, as a REST API and inside the JS, PHP, Swift and Android Algolia API clients.

**Important:** Algolia Places relies on OpenStreetMap data. Due to the sparseness of house level data in OSM, Places supports geocoding only up to the street level - house level precision is not guaranteed.

## Getting started

To use Algolia Places, all you need is an `<input>` and some JavaScript code that will load
and use the places.js library.

### CDN `<script>`

Our JavaScript library is available on the [jsDelivr CDN](http://www.jsdelivr.com).

```html
<%= javascript_include_tag config[:places_cdn_url] %>
```

Here's a small example using it:

```html
<input type="search" id="address-input" placeholder="Where are we going?" />

<%= javascript_include_tag config[:places_cdn_url] %>
<script>
  var placesAutocomplete = places({
    appId: 'YOUR_PLACES_APP_ID',
    apiKey: 'YOUR_PLACES_API_KEY',
    container: document.querySelector('#address-input')
  });
</script>
```

**Note:** You can access your Places credentials from the [dashboard](https://www.algolia.com/api-keys) like any other Algolia application.
If you do not have a Places application, you can create one by [signing up for free](https://www.algolia.com/users/sign_up/places).

**Important:** We recommend using jsDelivr only for prototyping, **not for production applications**. Whenever possible, you should host your assets yourself or use a premium CDN service. jsDelivr is a free service and isn’t operated by Algolia, so we won’t be able to provide support if it fails.

### Using npm

Algolia Places is also available on [npm](https://www.npmjs.com/package/places.js).

Install the module:

```sh
npm install places.js --save
```

Put an `<input>` in your html page:

```html
<input type="search" id="address-input" placeholder="Where are we going?" />
```

Initialize the places.js library:

```js
var places = require('places.js');
var placesAutocomplete = places({
  appId: 'YOUR_PLACES_APP_ID',
  apiKey: 'YOUR_PLACES_API_KEY',
  container: document.querySelector('#address-input')
});
```

### Demo

As a result, you will get the Algolia Places autocompletion menu:

<%= partial '/partials/examples/demo', locals: config[:credentials][:documentation] %>

## Usage

To turn any HTML `<input />` into an address search bar make sure you include the `places.js` library and use the following initialization code:

```js
const options = {
  appId: 'YOUR_PLACES_APP_ID',
  apiKey: 'YOUR_PLACES_API_KEY',
  container: '#my-input-DOM-selector',
  // ...
};
places(options);
```

Advanced example using all parameters:

```js
const fixedOptions = {
  appId: 'YOUR_PLACES_APP_ID',
  apiKey: 'YOUR_PLACES_API_KEY',
  container: document.querySelector('#demo'),
};

const reconfigurableOptions = {
  language: 'de', // Receives results in German
  countries: ['us', 'ru'], // Search in the United States of America and in the Russian Federation
  type: 'city', // Search only for cities names
  aroundLatLngViaIP: false // disable the extra search/boost around the source IP
};
const placesInstance = places(fixedOptions).configure(reconfigurableOptions);

// dynamically reconfigure options
placesInstance.configure({
  countries: ['us'] // only search in the United States, the rest of the settings are unchanged: we're still searching for cities in German.
})
```

Tip: _Places application IDs **always** start by_ `pl`, _which makes them recognizable at a glance._
_If you do not have a Places application, you can create one by [signing up for free](https://www.algolia.com/users/sign_up/places)._

### Options

Here are the options you can pass to the `places(options)` function:

##### Static options
These options can only be set during the instantiation of the places application using
```js
const placesInstance = places(options)
```

<!-- Indentation is on purpose for <td>s, to allow HTML inside markdown -->
<table class="api">
  <thead><tr>
    <th>Static Option</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-container"><code>container<span class="link">*</span></code></div>

Type: **[HTMLInputElement](https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/html2/HTMLInputElement.html)**

<span class="link">*</span> Required
</td>
<td markdown="1">
Determines the `<input>` that will be used for the Algolia Places autocompletion menu.

You just need to pass a reference to an Element. Obtained via
[document.querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector) for example.

**Important**: This parameter can only be set at instantiation.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-appId"><code>appId</code></div>

Type: **string**
</td>
<td markdown="1">
The Places application ID to use.

**Note**: Create a <a href="https://www.algolia.com/users/sign_up/places">Places app here</a>.

**Important**: This parameter can only be set at instantiation.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-apiKey"><code>apiKey</code></div>

Type: **string**
</td>
<td markdown="1">
The Places search API key to use.

**Important**: This parameter can only be set at instantiation.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-templates"><code>templates</code></div>

Type: **Object**
</td>
<td markdown="1">
Change the templates used in place.js.

Available templates:

- value
- suggestion

Each template is a function that will receive a [suggestion object](#suggestions) and must return
a `string`.

`value` must return a plain string as it's used to fill the `input.value`. `suggestion` should
return an HTML string to be displayed in the dropdown.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-style"><code>style</code></div>

Type: **boolean**
</td>
<td markdown="1">
Control whether the default styles should be used.

**Default**: Styles are enabled.

**Important**: This parameter can only be set at instantiation.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-appId"><code>accessibility</code></div>

Type: **Object**
</td>
<td markdown="1">
an object containing a `pinButton` and/or `clearButton` object which is composed of html attributes to apply to the corresponding button

**Example**:
```
accessibility: {
  pinButton: {
    'aria-label': 'use browser geolocation',
    'tab-index': 12,
  },
  clearButton: {
    'tab-index': 13,
  }
}
```

**Important**: This parameter can only be set at instantiation.
</td>
    </tr>
  </tbody>
</table>

##### Reconfigurable options
These options can be set during the instantiation of the places application using

```js
const placesInstance = places(options)
```

or at any time using

```js
placesInstance.configure(options)
```

<table class="api">
  <thead><tr>
    <th>Reconfigurable option</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-type"><code>type</code></div>

Type: **string**
</td>
<td markdown="1">
Restrict the search results to a specific type.

Available types:

- city
- country
- address
- busStop
- trainStation
- townhall
- airport

**Default**: Search in all types.

**Note**: If you restrict the search to `city` or `airport`, you probably want to disable the `aroundLatLngViaIP` option as well. This will make sure you don't get only nearby results.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-postcode-search"><code>postcodeSearch</code></div>

Type: **boolean**
</td>
<td markdown="1">
Only search in the postcode field.

**Default**: false.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-language"><code>language</code></div>

Type: **string**
</td>
<td markdown="1">
Change the default language of the results.
You can pass two letters language codes ([ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)).

**Default**: Current user language obtained via `navigator.language` in the two letter form.
Example: `en` when navigator.language is `en_US`.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-countries"><code>countries</code></div>

Type: **string[]**
</td>
<td markdown="1">
Change the countries to search in. You must pass an array of two letters country codes
([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).

**Default**: Search on the whole planet.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundLatLng"><code>aroundLatLng</code></div>

Type: **string**
</td>
<td markdown="1">
Force to *first* search around a specific latitude longitude. The option value must be provided as a string:
`latitude,longitude` like `12.232,23.1`.

The default is to search around the location of the user determined via his IP address (geoip).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundLatLngViaIP"><code>aroundLatLngViaIP</code></div>

Type: **boolean**
</td>
<td markdown="1">
Whether or not to *first* search around the geolocation of the user found via his IP address. This is `true` by
default.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundRadius"><code>aroundRadius</code></div>

Type: **number**
</td>
<td markdown="1">
Radius in meters to search around the latitude longitude. Otherwise a default radius is automatically computed
given the area density.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-insideBoundingBox"><code>insideBoundingBox</code></div>

Type: **string**
</td>
<td markdown="1">
Filters the results inside the area defined by the two extreme points of a rectangle. [See guide](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-inside-rectanglepolygonal-area) or [API reference](https://www.algolia.com/doc/api-reference/api-parameters/insideBoundingBox/).

Format: `topRightLat, topRightLng, bottomLeftLat, bottomLeftLng`

Example: `"60, 16, 40, -4"`
</td>
  </tr>
  <tr>
<td markdown="1">
<div class="api-entry" id="api-options-insidePolygon"><code>insidePolygon</code></div>

Type: **string**
</td>
<td markdown="1">
Filters the results inside the area defined by a shape. [See guide](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-inside-rectanglepolygonal-area) or [API reference](https://www.algolia.com/doc/api-reference/api-parameters/insidePolygon/).

Format: `p1Lat, p1Lng, p2Lat, p2Lng, p3Lat, p3Lng...`
</td>
</tr>
<tr>
<td markdown="1">
<div class="api-entry" id="api-options-getRankingInfo"><code>getRankingInfo</code></div>

Type: **boolean**
</td>
<td markdown="1">
Controls whether the [_rankingInfo](https://www.algolia.com/doc/api-reference/api-methods/search/#method-response-_rankinginfo) object should be included in the hits. This defaults to `false`.

The _rankingInfo object for a Places query is slightly different from a regular Algolia query and you can read up more about the difference and how to leverage them in [our guide](examples.html#using-_rankinginfo).
</td>
  </tr>
  <tr>
<td markdown="1">
<div class="api-entry" id="api-options-useDeviceLocation"><code>useDeviceLocation</code></div>

Type: **boolean**
</td>
<td markdown="1">
Ask and use the device location.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-computeQueryParams"><code>computeQueryParams</code></div>

Type: **object**
</td>
<td markdown="1">
Allows you to override computed query parameters sent to the [Algolia Places REST API](rest.html).
</td>
    </tr>
</tbody>
</table>

##### Advanced static options
These are very advanced options that can be only set during the instantiation of the places application using

```js
const placesInstance = places(options)
```

These options should not be considered for regular use cases.

<table class="api">
  <thead><tr>
    <th>Advanced static option</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-clientOptions"><code>clientOptions</code></div>

Type: **object**
</td>
<td markdown="1">
Algolia [JavaScript API client options](https://github.com/algolia/algoliasearch-client-js#client-options).

**Note:** This is an advanced option.
</td>
  </tr>
  <tr>
<td markdown="1">
<div class="api-entry" id="api-options-autocompleteOptions"><code>autocompleteOptions</code></div>

Type: **object**
</td>
<td markdown="1">
[autocomplete.js options](https://github.com/algolia/autocomplete.js#options) to configure the underlying
autocomplete.js instance.

**Note:** This is an advanced option.
</td>
    </tr>
  </tbody>
</table>

### Events

The Algolia Places autocomplete exposes some events that you can register to:

```js
var placesAutocomplete = places({
  appId: 'YOUR_PLACES_APP_ID',
  apiKey: 'YOUR_PLACES_API_KEY',
  container: document.querySelector('#demo')
});

placesAutocomplete.on('change', e => console.log(e.suggestion));
```

<table class="api">
  <thead><tr>
    <th>Event</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-change"><code>change</code></div>

Event data:

- *query* <br>Type: **string**
- *rawAnswer* <br>Type: **object**
- *suggestion* <br>Type: **[suggestion](#suggestions)**
- *suggestionIndex* <br>Type: **number**
</td>
<td markdown="1">
Fired when suggestion selected in the dropdown or hint was validated.

You can use this event to then populate another form, [see the example](examples.html#complete-form).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-suggestions"><code>suggestions</code></div>

Event data:

- *rawAnswer* <br>Type: **object**
- *query* <br>Type: **string**
- *suggestions* <br>Type:  **Array<[suggestion](#suggestions)>**
</td>
<td markdown="1">
Fired when dropdown receives suggestions. You will receive the array of suggestions that are displayed.

You will also receive this event when no places were found.

You can use this event to display the suggestions on a map, see the [map example](examples.html#link-to-a-map).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-cursorchanged"><code>cursorchanged</code></div>

Event data:

- *rawAnswer* <br>Type: **object**
- *query* <br>Type: **string**
- *suggestion* <br>Type: **[suggestion](#suggestions)**
- *suggestionIndex* <br>Type: **number**
</td>
<td markdown="1">
Fired when arrows keys are used to navigate suggestions.

You can use this event to highlight markers on a map, see the [map example](examples.html#link-to-a-map).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-clear"><code>clear</code></div>

Event data: `undefined`

</td>
<td markdown="1">
Fired when the input is cleared. This event doesn't return anything, as the value of the query is then `''`
and no suggestion is displayed nor selected.

You can use this event when used with a map to reset the pins and the default center. See this behaviour
live on the [map example](examples.html#link-to-a-map).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-locate"><code>locate</code></div>

Event data: `undefined`

</td>
<td markdown="1">
Fired when the location pin is clicked. This event doesn't return anything.

You can use this event when the user has chosen to enable geolcation in the browser by clicking on the pin icon.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-limit"><code>limit</code></div>

Event data:

- *message* <br>Type: **string**

</td>
<td markdown="1">
Fired when you reached your current [rate limit](pricing.html#rate-limits).
</td>
    </tr>
    <tr>
<td markdown="1">
  <div class="api-entry" id="api-events-error"><code>error</code></div>

Event data:

- *message* <br>Type: **string**

</td>
<td markdown="1">
  Fired when we could not make the request to Algolia Places servers for any reason but reaching your [rate limit](pricing.html#rate-limits).
</td>
    </tr>
  </tbody>
</table>

### Methods

We provide some methods to help you interact with the places.js autocomplete instance.
If you have a good use case for a new method, [open a new issue](https://github.com/algolia/places/issues/new) about it.

<table class="api">
  <thead><tr>
    <th>Name</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-methods-open"><code>open</code></div>

Returns: **undefined**
</td>
<td markdown="1">
Usage: **placesAutocomplete.open()**

Opens the dropdown menu. The menu will be visible if it has content to show.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-methods-close"><code>close</code></div>

Returns: **undefined**
</td>
<td markdown="1">
Usage: **placesAutocomplete.close()**

Closes the dropdown menu.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-methods-getVal"><code>getVal</code></div>

Returns: **string**
</td>
<td markdown="1">
Usage: **placesAutocomplete.getVal()**

Get the current input value.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-methods-setVal"><code>setVal</code></div>

Returns: **undefined**
</td>
<td markdown="1">
Usage: **placesAutocomplete.setVal()**

Set the current input value. This will not open the menu. You will need to call [.open()](#api-methods-open)
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-methods-destroy"><code>destroy</code></div>

Returns: **undefined**
</td>
<td markdown="1">
Usage: **placesAutocomplete.destroy()**

Removes the places autocomplete instance, switch the input back to it's original behavior.
</td>
    </tr>
  </tbody>
</table>

### Suggestions

All of the events will send suggestion objects with those properties:

<table class="api">
  <thead><tr>
    <th>Property</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-type"><code>type</code></div>

Type: **string**
</td>
<td markdown="1">
Type of the current suggestion, possible values: `country`, `city`, `address`, `busStop`, `trainStation`, `townhall`, `airport`.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-name"><code>name</code></div>

Type: **string**
</td>
<td markdown="1">
Display name of the place found.

Examples:

 - Paris
 - 589 Howard Street San Francisco
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-city"><code>city</code></div>

Type: **string**
</td>
<td markdown="1">
City name.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-country"><code>country</code></div>

Type: **string**
</td>
<td markdown="1">
Country name.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-countryCode"><code>countryCode</code></div>

Type: **string**
</td>
<td markdown="1">
Two letters country code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-administrative"><code>administrative</code></div>

Type: **string**
</td>
<td markdown="1">
Administrative region depending on the country.

Examples:

 - Pays de la Loire
 - Texas
 - Catalunya
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-county"><code>county</code></div>

Type: **string**
</td>
<td markdown="1">
County level administrative region depending on the country.

Examples:

 - Corrèze
 - Clark County
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-suburb"><code>suburb</code></div>

Type: **string**
</td>
<td markdown="1">
Suburb name.

Examples:

 - Angelino heights
 - Harbor City
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-latlng"><code>latlng</code></div>

Type: **Object**
</td>
<td markdown="1">
Latitude and longitude of the place found. Shape: `{lat: 48.797885, lng: 2.337034}`.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-postcode"><code>postcode</code></div>

Type: **string**
</td>
<td markdown="1">
The best matching postcode (or ZIP Code) of the place found.

Examples:

 - 94104
 - 75009
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-postcodes"><code>postcodes</code></div>

Type: **array**
</td>
<td markdown="1">
The list of all postcode (or ZIP Code) of the place found.

Examples:

 - `["94102", "94103", "94104", ... ]`
 - `["75008", "75009"]`
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-value"><code>value</code></div>

Type: **string**
</td>
<td markdown="1">
Full display name of the place found. It's the value displayed in the input.

Examples:

 - Paris Île-de-France, France
 - 589 Howard Street San Francisco, California, United States of America
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-value"><code>highlight</code></div>

Type: **object**
</td>
<td markdown="1">
Given the query, contains the highlighted values of the following attributes:

- name
- suburb
- city
- postcode
- county
- administrative
- country

Example:

```js
// query was `par`
console.log(suggestion.highlight);
// {
//   name: '<em>Par</em>is',
//   administrative: 'Île-de-France',
//   country: 'France'
// }
```

</td>
    </tr>
  </tbody>
</table>

## Integrations

On top of the regular **places** component, the places.js library offers additional integrations with autocomplete.js and InstantSearch.js.

### autocomplete.js

The places.js library is leveraging [Algolia's autocomplete.js](https://github.com/algolia/autocomplete.js) library.

To be able to combine your own data along with showing results of Algolia Places, we provide an [autocomplete.js dataset](https://github.com/algolia/autocomplete.js#datasets):

```html
<%= javascript_include_tag config[:places_autocomplete_dataset_cdn_url] %>
```

The autocomplete.js dataset is exported as `placesAutocompleteDataset` in the window, also available with npm using:

```js
import placesAutocompleteDataset from 'places.js/placesAutocompleteDataset';
```

All the places.js [options](#options) are available and can be passed to the `placesAutocompleteDataset` function. The places.js CSS file is automatically loaded so that the rendering of suggestions is already the one you will expect.

You will need an [Algolia account](https://www.algolia.com/) to be able to search into your own data. See the [autocomplete.js dataset example](examples.html#autocompletejs).

### InstantSearch.js

If you're already using instantsearch.js, you can use Algolia Places out of the box. This
widget will do a search of places using Algolia Places and when an address is selected, it
will update the geolocation point of the instantsearch.js search.

You can include it using a link tag:

```html
<%= javascript_include_tag config[:places_instantsearch_widget_cdn_url] %>
```

The widget is exported as `placesInstantsearchWidget` in the window. It is also available with
npm using:

```js
import widget from 'places.js/placesInstantsearchWidget';
```

The widget accept the same [options as places.js](#options). Because it is an instantsearch.js that
will have an impact on the instantsearch search, it contains other options:


<!-- Indentation is on purpose for <td>s, to allow HTML inside markdown -->
<table class="api">
  <thead><tr>
    <th>Option</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-instantsearch-default-position"><code>defaultPosition</code></div>

Type: **number[]**

</td>
<td markdown="1">
Sets the default position around which the instantsearch search is done, when no element is selected in the places widget.
This position is an array of two numbers, representing the latitude and the longitude.
</td>
    </tr>
    </tbody>
    </table>

## Security
The default way of using Places is to pass your Places application ID and API Key to the Places library.
However, since the Places library is user-facing, this means that your credentials can be exposed.

It is therefore recommended to put in place some extra limitations in order to prevent any abuse of your API Key. Algolia offers two solutions to restrict the usage of your API Keys, which can be combined together:
- [restricted API Keys](#restricted-api-keys)
- [secured API Keys](#secured-api-keys)

Note: _This section will not go in extreme details about the concepts that are presented as they are explained in great lengths in the [official Algolia documentation](https://www.algolia.com/doc/guides/security/api-keys/)._

### Restricted API Keys
In Places like in any other Algolia application, you can set up authorizations and restrictions with a great level of precision when creating API keys. It’s common to combine these rules to make it very hard to use a public API key to crawl your data.

You can read more about [creating restricted API Keys](https://www.algolia.com/doc/guides/security/api-keys/?language=javascript#api-key-restrictions) in the official Algolia documentation.

For instance, for Places, it is common practice to have a restricted API Key with the following restrictions:
- Rate limiting per IP
- Restricting the HTTP Referer to your website ([Read about the limitations](https://www.algolia.com/doc/guides/security/best-security-practices/?language=javascript#http-referers-restrictions))

Designing such an API Key will protect your API Key from being used by other website, while partially mitigating attacks from other tools without having to implement an advanced security system or having to route your calls through your backend for validation, which would increase the latency of each query.

### Secured API Keys
If you want to have strong control on who accesses Places with your API Key, you can use [secured API Keys](https://www.algolia.com/doc/guides/security/api-keys/?language=javascript#generating-secured-api-keys). This will require a back-end implementation of the secured API Key generation.

For instance, for Places, you can create short-lived API Keys for every single user based on your own metrics, using secured API Keys.

There is a great tutorial on [how to use secured API Keys](https://www.algolia.com/doc/guides/security/api-keys/how-to/how-to-restrict-the-search-to-a-subset-of-records-belonging-to-a-specific-user/#introduction) in the official documentation of Algolia.

## Styling

Algolia Places can fit existing designs. By default only the dropdown has a default light style.

See our [styling example](./examples.html#input-styling).

### HTML structure

The overall html structure looks like this:

```html
<span class="algolia-places">
  <input class="ap-input" />
  <button type="button" class="ap-input-icon ap-icon-clear"><svg></svg></button>
  <button type="button" class="ap-input-icon ap-icon-pin"><svg></svg></button>
</span>
```

Then the dropdown html structure looks like this:

```html
<span class="ap-dropdown-menu">
  <div>
    <span class="ap-suggestions">
      <div class="ap-suggestion">
        <span class="ap-suggestion-icon"><svg></svg></span>
        <span class="ap-name"></span>
        <span class="ap-address"></span>
      </div>
      <!-- Other suggestions -->
    </span>
  </div>
</span>
```

### CSS classes

Here's a visual explanation of the different CSS classes:

<%= partial '/partials/examples/visual-helper' %>

Here's a default empty CSS file you can copy paste to tune the default styling:

```css
/* Main input wrapper */
.algolia-places {}

/* The algolia-places input */
.ap-input, .ap-hint {}

/* The style of the svg icons when the input is on hover */
.ap-input:hover ~ .ap-input-icon svg,
.ap-input:focus ~ .ap-input-icon svg,
.ap-input-icon:hover svg {}

/* The dropdown style */
.ap-dropdown-menu {}

/* The suggestions style */
.ap-suggestion {}

/* The highlighted names style */
.ap-suggestion em {}

/* The addresses style */
.ap-address {}

/* The icons of each suggestions ( can be a building or a pin ) */
.ap-suggestion-icon {}

/* The style of the svg inside the .ap-suggestion-icon */
.ap-suggestion-icon svg {}

/* The icons inside the input ( can be a pin or a cross ) */
.ap-input-icon {}

/* The style of the svg inside the .ap-input-icon */
.ap-input-icon svg {}

/* .a-cursor is the class a suggestion go on hover */
.ap-cursor {}

/* The style of the svg icon, when the .ap-suggestion is on hover */
.ap-cursor .ap-suggestion-icon svg {}

/* The styles of the Algolia Places input footer */
.ap-footer {}

/* The styles of the Algolia Places input footer links */
.ap-footer a {}

/* The styles of the Algolia Places input footer svg icons */
.ap-footer a svg {}

/* The styles of the Algolia Places input footer on hover */
.ap-footer:hover {}
```

### Disable default style

By default we insert some styling into your page. You can disable all the Algolia Places styling by passing the `style: false` option.

Once you do so, all [CSS classes](#css-classes) will be prefixed with `ap-nostyle` and no styling will be applied anymore.

Pin and clear icons will still be shown and working, without being styled.

## Licenses & Policies

You can display Algolia Places results on any map provider.

In accordance with our [terms of use](https://www.algolia.com/policies/terms), you are required to comply with our [Acceptable Use Policy](https://www.algolia.com/policies/acceptable-use).

If your application uses [places.js](https://github.com/algolia/places) library, then the Algolia logo must be included and must not be altered (size, colors, position, linked URL, etc.). If your application uses the Places API directly or any other API client, you must show a "Search by Algolia" logo next to the data. You can find the logo in [SVG format here](https://www.algolia.com/press/?section=brand-guidelines).

The places.js [is licensed](https://github.com/algolia/places/blob/master/LICENSE) under [MIT](https://en.wikipedia.org/wiki/MIT_License).

Address data is produced regularly processing different datasets such as:

[© OpenStreetMap](https://www.openstreetmap.org/) using the [Planet.osm](https://wiki.openstreetmap.org/wiki/Planet.osm) dataset under the [Open Database License (ODbL) v1.0](https://opendatacommons.org/licenses/odbl/1.0/).

[© GeoNames](https://www.geonames.org/) database under the [Creative Commons Attribution 4.0 License](https://creativecommons.org/licenses/by/4.0/).

[BAN](https://adresse.data.gouv.fr/) dataset for France under [ODbL v1.0](https://opendatacommons.org/licenses/odbl/1.0/).

[IGN Admin Express](http://professionnels.ign.fr/adminexpress) dataset under the [Open License 1.0](https://www.etalab.gouv.fr/wp-content/uploads/2014/05/Licence_Ouverte.pdf).

## Browser support

Algolia Places comes with native support for all latest stable versions of current major browsers: Chrome, Firefox, Edge, Opera and Safari. Previous versions of those modern browsers should also work. But since those are auto-updating browsers, we do not guarantee it.

Algolia Places also works natively on Internet Explorer 11 and 10.

To support Internet Explorer 9, you need to include a polyfill for [Element.classList](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList). To do so, you can use the [Polyfill.io service](https://cdn.polyfill.io/v2/docs/).

## Examples

Have a look at our [examples page](examples.html).
