---
title: Examples
layout: documentation
---
<link rel="stylesheet" href="https://cdn.jsdelivr.net/instantsearch.js/2.10.1/instantsearch.min.css" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/instantsearch.js/2.10.1/instantsearch-theme-algolia.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/leaflet/1/leaflet.css" />
<script src="https://cdn.jsdelivr.net/leaflet/1/leaflet.js"></script>

## Rendering

### Simple input

In this section, we will see how places.js turns any HTML `<input>` into an autocomplete address search bar.

<%= partial '/partials/examples/simple_input', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/simple_input', locals: config[:credentials][:placeholder] %>
```

You should consider using this snippet when you want your users to easily find their addresses, and have it presented in a good and reliable format.

### Complete form

In this section, we will see how you can interact with Places in order to fill in a complete address form.

Having an address autocomplete offers great user experience, but if the address is meant to be processed internally or used for shipping, you may have to reformat or access parts of the address, which can be cumbersome when reading an already formatted address.

In order to help you with this, Places.js emits a [change event](documentation.html#events) when a user selects an address from its dropdown. The event includes the selected address, also called a [suggestion](documentation#suggestions), in a structured format, which can then be used to populate other fields. You can learn more about the suggestion object in the [documentation](documentation#suggestions).

<%= partial '/partials/examples/complete_form', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/complete_form', locals: config[:credentials][:placeholder] %>
```

This template can be used as a helper for shipping forms.

**Note:** This template intercepts the suggestion from the `change` event and updates other `<input>` fields, so that the user can then validate and/or modify the data if it is needed. This is considered a best practice because Places addresses can sometimes be incorrect or incomplete: new streets are built all the time; cities are sometimes renamed; or simply because the underlying OpenStreetMap data is not perfect in all areas. Therefore, you should not use the suggestion data without allowing the end user the possibility to modify the address.

**Note:** There are some challenges with address forms that have not been addressed in this example for the sake of simplicity. For instance, in some countries, there can be multiple postal codes for a single city, and you should then use a dropdown with the possible values provided in the suggestion, while still allowing the user to correct it if needed.

### Displaying on a map

We will use the [Leaflet](http://leafletjs.com/) JavaScript library as an example to display the places.js results on the map and update them when needed.

<%= partial '/partials/examples/map', locals: config[:credentials][:documentation] %>

To try this example, you need to add leaflet in your code:

```html
<link rel="stylesheet" href="https://cdn.jsdelivr.net/leaflet/1/leaflet.css" />
<script src="https://cdn.jsdelivr.net/leaflet/1/leaflet.js"></script>
```

Then use this:

```html
<%= partial '/partials/examples/map', locals: config[:credentials][:placeholder] %>
```

### Templates

**Warning:** This is an advanced feature.

Although Places.js comes with a good default template that should fit most use cases, you may want to customize both the input value and dropdown suggestion templates to better fit your needs.

In order to help you modify the rendered values for both objects, Places exposes a [templates option](documentation.html#api-options-templates) that can be configured for both the `value` and `suggestion` components.

Templates are functions called with a [suggestion object](./documentation.html#suggestions).

<%= partial '/partials/examples/templates', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/templates', locals: config[:credentials][:placeholder] %>
```

### Disable styling

**Warning:** This is an advanced feature.

The default Algolia Places styling can be enhanced by overriding the [default rules](documentation.html#styling).

If you need full control and want to disable all default styling, you can do it by setting the `style` option to false.

<%= partial '/partials/examples/disable_styling', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/disable_styling', locals: config[:credentials][:placeholder] %>
```

See our [documentation about styling](./documentation.html#styling) for more details.

**Important:** Regardless of how you want to style your results, your updated styles must still be compliant with our [Usage Policy](documentation.html#licenses--policies) and must display the Algolia Logo.


## Focusing search

Places offers many ways to restrict the scope of its search to either certain types of records, certain countries, or even certain locations.

In this section, we will explore how we can use these restrictions to improve the relevance to best match the end user expectations.

### City search

**Concept:** [type](documentation.html#api-options-type) parameter.

In this section, we will see how you can restrict the scope of Places to only a certain type.

There are many use-cases where having a full blown address search is not necessary, and simply searching for a city is enough.

In order to help you with this, Places.js exposes a configuration parameter to restrict the type of records you want to search against. You can build a city search input by using the [type parameter](documentation.html#api-options-type).

<%= partial '/partials/examples/city_search', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/city_search', locals: config[:credentials][:placeholder] %>
```

**Note:** It is possible to restrict the type of records to more than a single type by passing an array of types that you want to search against. For instance, you can combine the `city` type with the `airport` type. However, be careful when searching for cities and other types at the same time. Due to the fact that cities are prioritized in the ranking, other types of records can be pushed back and have difficulties appearing in the results.

### Country search

You can also search in countries only.

places.js turns any HTML `<input>` into a Country as-you-type search bar. You can filter on a specific list of countries if needed:

<%= partial '/partials/examples/country_search', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/country_search', locals: config[:credentials][:placeholder] %>
```

### Searching in a country

**Concept:** [countries](documentation.html#api-options-countries) parameter.

In this section, we will see how you can restrict the scope of Places to search only in some countries.

Places.js exposes a [countries parameter](documentation.html#api-options-countries) will restrict the search to records that belong to this array of countries. For instance, if you want to restrict the search to records in France:

<%= partial '/partials/examples/single_country_search', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/single_country_search', locals: config[:credentials][:placeholder] %>
```

**Note:** It is considered a best practice to restrict Places search to only the countries that are relevant to your use case. Restricting Places to a single country can greatly improve the relevance of the results.

### Search around lat/lng

**Concepts:** [aroundLatLng](documentation.html#api-options-aroundLatLng) and [aroundRadius](documentation.html##api-options-aroundRadius) parameters.

Reusing the [map](#displaying-on-a-map) example, we want to only search around Paris, France.

This is useful when you really want to display results around a specific area.

<%= partial '/partials/examples/map_paris', locals: config[:credentials][:documentation] %>

To try this example, you need to add leaflet in your code:

```html
<link rel="stylesheet" href="https://cdn.jsdelivr.net/leaflet/1/leaflet.css" />
<script src="https://cdn.jsdelivr.net/leaflet/1/leaflet.js"></script>
```

Then use this:

```html
<%= partial '/partials/examples/map_paris', locals: config[:credentials][:placeholder] %>
```

**Note:** Both parameters are key to restrict the search to a certain area. If a location is passed in `aroundLatLng` without the `aroundRadius` parameter being set, Places will prioritize results around the location but will also search the rest of the world for additional results. This is why the `aroundLatLng` parameter should be considered as a wait to _first_ search around a location rather than as a filter.

## Advanced

### Dynamic control

Using the `.configure` method, you can dynamically modify the behaviour of the Places search, to better tailor it to your users' need.

For instance, if your service covers multiple countries or is available in multiple languages, you can dynamically modify Places configuration to better represent where your customer wants to search and in which language the results should be displayed.

<%= partial '/partials/examples/dynamic_control', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/dynamic_control', locals: config[:credentials][:placeholder] %>
```

### Places + Custom data

Using [Algolia's autocomplete.js](https://github.com/algolia/autocomplete.js) library, you can search in your own data along with showing Algolia Places results.

You need an Algolia account to do so and the Algolia Places dataset:

<%= partial '/partials/examples/autocomplete_dataset', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/autocomplete_dataset', locals: config[:credentials][:placeholder] %>
```

See the documentation about the [placesAutocompleteDataset function](documentation.html#autocompletejs).

### Places + InstantSearch

<%= partial '/partials/examples/instantsearch', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/instantsearch', locals: config[:credentials][:placeholder] %>
```

### Nearby City Search

**Concepts:** type parameter, aroundLatLngViaIP, aroundPrecision, Places API Client.

In this section, we will see how you can _emulate_ reverse geocoding to find city closest to a user using the Places API Client.

<%= partial '/partials/examples/reverse-city-search/demo', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/reverse-city-search/code', locals: config[:credentials][:placeholder] %>
```

**Note:** This example uses the standard [JavaScript API client](https://github.com/algolia/algoliasearch-client-javascript) in which the Places API is integrated. This example does not use the Places.js library.

**Note:** This is not a reverse geocoding API, and it is still bound by the ranking used for search, which means that in some cases large close-by cities can be promoted over a more closely located city. You should use the reverse API if you want results that are only affected by the geolocation.

### Reverse geocoding

**Concepts:** reverse API.

In this section, we will see how you can do reverse geocoding with a precision up to the street using the reverse places client.

<%= partial '/partials/examples/reverse_geocoding', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/reverse_geocoding', locals: config[:credentials][:placeholder] %>
```

**Important:** This example does not rely on the Places.js library, but the JavaScript algoliasearch-client library. This API is only available in the JS Client for **version 3.31 and above**.

**Note:** The format of the response is slightly different from the one that is available with the Places.js library (it matches the format of the rawAnswer field in Places.js suggestions object).

**Note:** There are many use cases where you will want to combine the reverse geocoding API with the regular Places search. In this case, you do not need to import both the standard Places library and the JS Client, as the reverse functionality is included in the standard Places.js library. You can access the reverse endpoint programmatically using `placesInstance.reverse(location)`.

### Dynamic Form

**Concepts:** dynamic configuration, reverse API, multiple instance.

As we explained in the Focusing Search section, restricting the search to a single country can greatly increase the relevance of the search, because it allows Places to leverage certain specificities of that particular country. However, your userbase might not necessarily be located in a single country, which means that by default you cannot use this option to your advantage.

In this example, we will present a way to dynamically restrict the scope of the Places search to a single country on page load, while still allowing the user to change the behaviour if he prefers less restricted search. We will also expose a way for the user to use the reverse geocoding API to fill in the details for him based on the geolocation provided by the browser. In other words, this is a more advanced implementation of the Complete Form example introduced earlier.

<%= partial '/partials/examples/dynamic_search', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/dynamic_search', locals: config[:credentials][:placeholder] %>
```

### Using _rankingInfo

**Concepts:** _rankingInfo, query strategy, geolocation precision.

In this section, we will see how we can leverage `_rankingInfo` to provide additional information to our user about certain behaviours of the query strategy.

As with any Algolia query, `_rankingInfo` will include information about how the ranking was computed based on the `words`, `exact`, `filters`, `nbTypos`, etc.
However, Places also enriches the _rankingInfo with additional information based on which part of the query strategy was used to return this result.
Finally, in countries where Places supports house level precision queries, it also provides some data on how precise the geolocation resolution was.

As such, on top of the regular `_rankingInfo` fields, Places exposes the two following:
- query
- roadNumberPrecision

##### query
The `query` field of the `_rankingInfo` object is a reference to which query strategy was used to find this result while executing the Algolia Places Query.
You can read more about the Algolia Places query strategy [here](api-clients#query-strategy).

It can take 3 values depending of the strategy used to find this record:
- **worldwide_query**: Places searched the entire world to find this record.
- **local_query**: Places searched the country of the user to find this record.
- **geo_query**: Places searched around the user to find this record.

You can leverage this attribute to better understand how your constraints impact the relevance of your search.

**Note:** This is a very advanced feature, which will be irrelevant to most users.

**Note:** All searches that Places does internally still take into account the filters that you applied, so if you restrict a query to only a few countries, a worldwide query will only look into these few countries.

##### roadNumberPrecision
The `roadNumberPrecision` field of the `_rankingInfo` object provides additional information on how precise the geolocation of the record is.

By default, Places only offers precision up to the street level, which means that all the house numbers of a street will have the same geolocation. However, Places offers house level precision in France, if you are part of [the opt-in beta for this program](https://goo.gl/forms/8sIEGSShUm85jMLp2).
In this case, the `roadNumberPrecision` field will return either:
- **exact**: the house number passed in the query was found exactly in the data
- **closest**: interpolate the position based on known datapoints
- **centroid**: computed center of mass of the geometric area

##### Demo
In this demo, we will visually show which query strategy was used to find each suggestion (on the left of the suggestion), as well as show the geolocation precision of results on the right.
Remember that house level precision is only available in France, so here are some example queries that you can try to see how things work under the hood:
- `L` (or any first letter that is not the first letter of a large city that is close to you)
- `55 rue d'Amsterdam, Paris` (look at how there are 2 records and only one has the exact house number - 3 circles vs 2 circles)

<%= partial '/partials/examples/ranking_info', locals: config[:credentials][:documentation] %>

```html
<%= partial '/partials/examples/ranking_info', locals: config[:credentials][:placeholder] %>
```