## Getting started

To use Algolia Places, all you need is an `<input>` and some JavaScript code that will load
and use the places.js library.

### CDN `<script>`

Our JavaScript library is available on the [jsDelivr CDN](http://www.jsdelivr.com/projects/places.js).

```html
<%= javascript_include_tag config[:places_cdn_url] %>
```

Here's a small example using it:

```html
<input type="search" id="address-input" placeholder="Where are we going?" />

<%= javascript_include_tag config[:places_cdn_url] %>
<script>
  var placesAutocomplete = places({
    container: document.querySelector('#address-input')
  });
</script>
```

### Using npm

Algolia Places is also available on [npm](https://www.npmjs.com/package/places.js).

Install the module:

```sh
npm install places.js --save
```

Put an `<input>` in your html page:

```html
<input type="search" id="address-input" placeholder="Where are we going?" />
```

Initialize the places.js library:

```js
var places = require('places.js');
var placesAutocomplete = places({
  container: document.querySelector('#address-input')
});
```

### Demo

As a result, you will get the Algolia Places autocompletion menu:

<input type="search" id="docs-getting-started-demo" class="form-control" placeholder="Where are we going?" />

## Usage

To turn any HTML `<input />` into an address search bar make sure you include the `places.js` library and use the following initialization code:

```js
var options = {
  container: '#my-input-DOM-selector',
  // ...
};
places(options);
```

### Options

Here are the options you can pass to the `places(options)` function:

<!-- Indentation is on purpose for <td>s, to allow HTML inside markdown -->
<table class="api">
  <thead><tr>
    <th>Option</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-container"><code>container<span class="link">*</span></code></div>

Type: **[HTMLInputElement](https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/html2/HTMLInputElement.html)**

<span class="link">*</span> Required
</td>
<td markdown="1">
Determines the `<input>` that will be used for the Algolia Places autocompletion menu.

You just need to pass a reference to an Element. Obtained via
[document.querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector) for example.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-type"><code>type</code></div>

Type: **string**
</td>
<td markdown="1">
Restrict the search results to a specific type.

Available types:

- city
- country
- address

**Default**: Search in all types.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-language"><code>language</code></div>

Type: **string**
</td>
<td markdown="1">
Change the default language of the results.
You can pass two letters country codes ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).

**Default**: Current user language obtained via `navigator.language` in the two letter form.
Example: `en` when navigator.language is `en_US`.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-countries"><code>countries</code></div>

Type: **string[]**
</td>
<td markdown="1">
Change the countries to search in. You must pass an array of two letters country codes
([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).

**Default**: Search on the whole planet.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundLatLng"><code>aroundLatLng</code></div>

Type: **string**
</td>
<td markdown="1">
Force to *first* search around a specific latitude longitude. The option value must be provided as a string:
`latitude,longitude` like `12.232,23.1`.

The default is to search around the location of the user determined via his IP address (geoip).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundLatLngViaIP"><code>aroundLatLngViaIP</code></div>

Type: **boolean**
</td>
<td markdown="1">
Whether or not to *first* search around the geolocation of the user found via his IP address. This is `true` by
default.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-aroundRadius"><code>aroundRadius</code></div>

Type: **number**
</td>
<td markdown="1">
Radius in meters to search around the latitude longitutde. Otherwise a default radius is automatically computed
given the area density.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-templates"><code>templates</code></div>

Type: **Object**
</td>
<td markdown="1">
Change the templates used in place.js.

Available templates:

- inputValue
- dropdownSuggestion

Each template is a function that will receive a [suggestion object](#suggestion-object) and must return
a `string`.

`inputValue` must return a plain string as it's used to fill the `input.value`. `dropdownSuggestion` can
return an HTML string to be displayed in the dropdown.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-options-style"><code>style</code></div>

Type: **boolean**
</td>
<td markdown="1">
Control whether the default styles should be used.

**Default**: Styles are enabled.
</td>
    </tr>
  </tbody>
</table>

Simple example providing only the required `container` parameter:

```js
var placesAutocomplete = {
  container: document.querySelector('#demo')
};
```

Advanced example using all parameters:

```js
var placesAutocomplete = {
  container: document.querySelector('#demo'),
  language: 'de', // Receives results in German
  countries: ['us', 'ru'], // Search in the United States of America and in the Russian Federation
  type: 'city' // Search only for cities names
};
```

### Events

The Algolia Places autocomplete exposes some events that you can register to:

```js
var placesAutocomplete = {
  container: document.querySelector('#demo')
};

placesAutocomplete.on('change', e => console.log(e.suggestion));
```

<table class="api">
  <thead><tr>
    <th>Event</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-change"><code>change</code></div>

Event data:

- *rawAnswer* <br>Type: object
- *query* <br>Type: string
- *suggestion* <br>Type: [suggestion](#suggestion-object)
- *suggestionIndex* <br>Type: number
</td>
<td markdown="1">
Fired when suggestion selected in the dropdown or hint was validated.

You can use this event to then populate another form, [see the example](examples.html#complete-form).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-suggestions"><code>suggestions</code></div>

Event data:

- *rawAnswer* <br>Type: object
- *query* <br>Type: string
- *suggestions* <br>Type:  [suggestion](#suggestion-object)
</td>
<td markdown="1">
Fired when dropdown receives suggestions. You will receive the array of suggestions that are displayed.

You will also receive this event when no places were found.

You can use this event to display the suggestions on a map, see the [map example](examples.html#displaying-a-map).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-events-cursorchanged"><code>cursorchanged</code></div>

Event data:

- *rawAnswer* <br>Type: object
- *query* <br>Type: string
- *suggestion* <br>Type: [suggestion](#suggestion-object)
- *suggestionIndex* <br>Type: number
</td>
<td markdown="1">
Fired when arrows keys are used to navigate suggestions.

You can use this event to highlight markers on a map, see the [map example](examples.html#displaying-a-map).
</td>
    </tr>
  </tbody>
</table>

### Suggestions

All of the events will send suggestion objects with those properties:

<table class="api">
  <thead><tr>
    <th>Property</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-type"><code>type</code></div>

Type: string
</td>
<td markdown="1">
Type of the current suggestion, possible values: `country`, `city`, `address`.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-name"><code>name</code></div>

Type: string
</td>
<td markdown="1">
Display name of the place found.

Examples:

 - Paris
 - 589 Howard Street San Francisco
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-city"><code>city</code></div>

Type: string
</td>
<td markdown="1">
City name.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-country"><code>country</code></div>

Type: string
</td>
<td markdown="1">
Country name.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-countryCode"><code>countryCode</code></div>

Type: string
</td>
<td markdown="1">
Two letters country code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-administrative"><code>administrative</code></div>

Type: string
</td>
<td markdown="1">
Administrative region depending on the country.

Examples:

 - Pays de la Loire
 - Texas
 - Catalunya
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-latlng"><code>latlng</code></div>

Type: Object
</td>
<td markdown="1">
Latitude and longitude of the place found. Shape: `{lat: 48.797885, lng: 2.337034}`.
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-postcode"><code>postcode</code></div>

Type: string
</td>
<td markdown="1">
Postcode (or ZIP Code) of the place found.

Examples:

 - 94230
 - 1001
</td>
    </tr>
    <tr>
<td markdown="1">
<div class="api-entry" id="api-suggestion-value"><code>value</code></div>

Type: string
</td>
<td markdown="1">
Full display name of the place found. It's the value displayed in the input.

Examples:

 - Paris Ãle-de-France, France
 - 589 Howard Street San Francisco, California, United States of America
</td>
    </tr>
  </tbody>
</table>

### API

The documentation of the underlying REST API can be found [here](rest.html).

## Styling

Algolia Places can fit existing designs. By default only the dropdown has a default light style.

### HTML structure

The overall html structure looks like this:

```html
<span class="algolia-places">
  <input class="ap-input" />
  <button type="button" class="ap-input-icon ap-input-icon-clear"><svg></svg></button>
  <button type="button" class="ap-input-icon ap-input-icon-pin"><svg></svg></button>
</span>
```

Then the dropdown html structure looks like this:

```html
<span class="ap-dropdown-menu">
  <div>
    <span class="ap-suggestions">
      <div class="ap-suggestion">
        <span class="ap-suggestion-icon"><svg></svg></span>
        <span class="ap-name"></span>
        <span class="ap-address"></span>
      </div>
      <!-- Other suggestions -->
    </span>
  </div>
</span>
```

### CSS classes

Here's a visual explanation of the different CSS classes:

<%= partial '/partials/examples/visual-helper' %>

Here's a default empty CSS file you can copy paste to tune the default styling:

```css
/* Main input wrapper */
.algolia-places {}

/* The algolia-places input */
.algolia-places .ap-input, .algolia-places .ap-hint {}

/* The style of the svg icons when the input is on hover */
.algolia-places .ap-input:hover ~ .ap-input-icon svg,
.algolia-places .ap-input:focus ~ .ap-input-icon svg,
.algolia-places .ap-input-icon:hover svg {}

/* The dropdown style */
.algolia-places .ap-dropdown-menu {}

/* The suggestions style */
.algolia-places .ap-suggestion {}

/* The highlighted names style */
.algolia-places .ap-suggestion em {}

/* The addresses style */
.algolia-places .ap-address {}

/* The icons of each suggestions ( can be a building or a pin ) */
.algolia-places .ap-suggestion-icon {}

/* The style of the svg inside the .ap-suggestion-icon */
.algolia-places .ap-suggestion-icon svg {}

/* The icons inside the input ( can be a pin or a cross ) */
.algolia-places .ap-input-icon {}

/* The style of the svg inside the .ap-input-icon */
.algolia-places .ap-input-icon svg {}

/* .a-cursor is the class a suggestion go on hover */
.algolia-places .ap-cursor {}

/* The style of the svg icon, when the .ap-suggestion is on hover */
.algolia-places .ap-cursor .ap-suggestion-icon svg {}

/* The styles of the Algolia Places input footer */
.algolia-places .ap-footer {}

/* The styles of the Algolia Places input footer links */
.algolia-places .ap-footer a {}

/* The styles of the Algolia Places input footer svg icons */
.algolia-places .ap-footer a svg {}

/* The styles of the Algolia Places input footer on hover */
.algolia-places .ap-footer:hover {}
```

### Disabling default style

By default we insert some styling into your page. You can disable all the Algolia Places styling by passing the `style: false` option.

Once you do so, the default `algolia-places` class name will turn into `algolia-places-nostyle`. See our [styling examples](./examples.html#input-styling).

## Browser support

Algolia Places comes with native support for all current major browsers: Chrome, Firefox, Edge, Opera and Safari.

It also works natively on Internet Explorer 11 and 10.

To support Internet Explorer 9, you need to include a polyfill for [Element.classList](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList). To do so, you can use the [Polyfill.io service](https://cdn.polyfill.io/v2/docs/).


## Rate limits

The Algolia Places API enforces some rate limits.

<table class="rate-limits">
  <thead>
    <tr>
      <th>1,000 requests / day</th>
      <th>Need more?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Free</td>
      <td>
        Requires authentication
        <br />
        <a href="mailto:support@algolia.com">Contact us</a>
      </td>
    </tr>
  </tbody>
</table>

The rate-limits computation are per IP and per HTTP Referer.

## License

Algolia Places [is licensed](https://github.com/algolia/places/blob/master/LICENSE) under [MIT](https://en.wikipedia.org/wiki/MIT_License).

Address data Â© [OpenStreetMap](https://www.openstreetmap.org/) contributors.

## Examples

Have a look at our [examples page](examples.html).
